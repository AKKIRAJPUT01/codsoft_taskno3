import tkinter as tk
from tkinter import messagebox
import random
import string

class PasswordGenerator:
    def __init__(self, root):
        self.root = root
        self.root.title("Password Generator by Ankit")

        # Length label and entry
        self.length_label = tk.Label(root, text="Length:")
        self.length_label.grid(row=0, column=0, padx=10, pady=10)
        self.length_entry = tk.Entry(root)
        self.length_entry.grid(row=0, column=1, padx=10, pady=10)

        # Uppercase letters checkbox
        self.uppercase_var = tk.BooleanVar()
        self.uppercase_check = tk.Checkbutton(root, text="Include Uppercase Letters", variable=self.uppercase_var)
        self.uppercase_check.grid(row=1, column=0, columnspan=2, padx=10, pady=10)

        # Numbers checkbox
        self.numbers_var = tk.BooleanVar()
        self.numbers_check = tk.Checkbutton(root, text="Include Numbers", variable=self.numbers_var)
        self.numbers_check.grid(row=2, column=0, columnspan=2, padx=10, pady=10)

        # Special characters checkbox
        self.special_var = tk.BooleanVar()
        self.special_check = tk.Checkbutton(root, text="Include Special Characters", variable=self.special_var)
        self.special_check.grid(row=3, column=0, columnspan=2, padx=10, pady=10)

        # Generate button
        self.generate_button = tk.Button(root, text="Generate Password", command=self.generate_password)
        self.generate_button.grid(row=4, column=0, columnspan=2, padx=10, pady=10)

        # Password output
        self.password_label = tk.Label(root, text="Generated Password:")
        self.password_label.grid(row=5, column=0, padx=10, pady=10)
        self.password_entry = tk.Entry(root, width=50)
        self.password_entry.grid(row=5, column=1, padx=10, pady=10)

    def generate_password(self):
        length = self.length_entry.get()
        if not length.isdigit() or int(length) <= 0:
            messagebox.showwarning("Input Error", "Please enter a valid length.")
            return

        length = int(length)
        chars = string.ascii_lowercase
        if self.uppercase_var.get():
            chars += string.ascii_uppercase
        if self.numbers_var.get():
            chars += string.digits
        if self.special_var.get():
            chars += string.punctuation

        if not chars:
            messagebox.showwarning("Selection Error", "Please select at least one character set.")
            return

        password = ''.join(random.choice(chars) for _ in range(length))
        self.password_entry.delete(0, tk.END)
        self.password_entry.insert(0, password)

if __name__ == "__main__":
    root = tk.Tk()
    app = PasswordGenerator(root)
    root.mainloop()
